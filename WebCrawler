import org.json.JSONArray;
import org.json.JSONObject;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class WebCrawler {

    private Queue<String> urlQueue;
    private List<String> visitedURLs;
    private JSONArray array;

    public WebCrawler() {
        urlQueue = new LinkedList<>();
        visitedURLs = new ArrayList<>();
        array = new JSONArray();
    }

    public void crawl(String rootURL, int breakpoint) {
        urlQueue.add(rootURL);
        visitedURLs.add(rootURL);

        while (!urlQueue.isEmpty()) {
            String s = urlQueue.remove();
            String rawHTML = "";
            try {
                URL url = new URL(s);
                BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
                String inputLine = in.readLine();
                while (inputLine != null) {
                    rawHTML += inputLine;
                    inputLine = in.readLine();
                }
                String imgUrlPattern = "(http)?s?:?(\\/\\/[^\"']*\\.(?:png|jpg|jpeg|gif|png|svg))";
                Pattern patternImg = Pattern.compile(imgUrlPattern);
                Matcher matcherImg = patternImg.matcher(rawHTML);
                while (matcherImg.find()) {
                    String imgURL = matcherImg.group();
                    JSONObject jo = new JSONObject();
                    jo.put("imageUrl", imgURL);
                    jo.put("sourceUrl", s);
                    jo.put("depth", visitedURLs.size() - 1);
                    array.put(jo);
                }
                in.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
            String urlPattern = "https?://(?![^\" ]*(?:jpg|png|gif|svg))[^\" ]+";
            Pattern pattern = Pattern.compile(urlPattern);
            Matcher matcher = pattern.matcher(rawHTML);
            breakpoint = getBreakpoint(breakpoint, matcher);
        }
    }

    private int getBreakpoint(int breakpoint, Matcher matcher) {
        while (matcher.find()) {
            String actualURL = matcher.group();

            if (!visitedURLs.contains(actualURL)) {
                visitedURLs.add(actualURL);
                //  System.out.println("Website found with URL " + actualURL);
                urlQueue.add(actualURL);
            }
            if (breakpoint == 0) {
                break;
            }
            breakpoint--;
        }
        return breakpoint;
    }

    public static void main(String[] args) {
        WebCrawler crawler = new WebCrawler();
        String rootURL = "https://unsplash.com/";
        crawler.crawl(rootURL, 2);
        System.out.println(crawler.array);
    }
}
